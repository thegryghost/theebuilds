diff --git a/src/android/app/src/main/jni/android_config.cpp b/src/android/app/src/main/jni/android_config.cpp
index 08aed3216ea4..e147560c3b1f 100644
--- a/src/android/app/src/main/jni/android_config.cpp
+++ b/src/android/app/src/main/jni/android_config.cpp
@@ -21,7 +21,7 @@ void AndroidConfig::ReloadAllValues() {
 }
 
 void AndroidConfig::SaveAllValues() {
-    Save();
+    SaveValues();
     SaveAndroidValues();
 }
 
diff --git a/src/frontend_common/config.cpp b/src/frontend_common/config.cpp
index 9eb4799a696f..46277e28853b 100644
--- a/src/frontend_common/config.cpp
+++ b/src/frontend_common/config.cpp
@@ -5,6 +5,7 @@
 #include <array>
 #include "common/fs/fs.h"
 #include "common/fs/path_util.h"
+#include "common/logging/log.h"
 #include "common/settings.h"
 #include "common/settings_common.h"
 #include "common/settings_enums.h"
@@ -58,6 +59,19 @@ void Config::Initialize(const std::optional<std::string> config_path) {
 }
 
 void Config::WriteToIni() const {
+    std::string config_type;
+    switch (type) {
+    case ConfigType::GlobalConfig:
+        config_type = "Global";
+        break;
+    case ConfigType::PerGameConfig:
+        config_type = "Game Specific";
+        break;
+    case ConfigType::InputProfile:
+        config_type = "Input Profile";
+        break;
+    }
+    LOG_INFO(Config, "Writing {} configuration to: {}", config_type, config_loc);
     FILE* fp = nullptr;
 #ifdef _WIN32
     fp = _wfopen(Common::UTF8ToUTF16W(config_loc).data(), L"wb");
@@ -117,10 +131,10 @@ void Config::ReadPlayerValues(const std::size_t player_index) {
         player_prefix.append("player_").append(ToString(player_index)).append("_");
     }
 
+    const auto profile_name = ReadStringSetting(std::string(player_prefix).append("profile_name"));
+
     auto& player = Settings::values.players.GetValue()[player_index];
     if (IsCustomConfig()) {
-        const auto profile_name =
-            ReadStringSetting(std::string(player_prefix).append("profile_name"));
         if (profile_name.empty()) {
             // Use the global input config
             player = Settings::values.players.GetValue(true)[player_index];
@@ -139,6 +153,10 @@ void Config::ReadPlayerValues(const std::size_t player_index) {
             player.controller_type = controller;
         }
     } else {
+        if (global) {
+            auto& player_global = Settings::values.players.GetValue(true)[player_index];
+            player_global.profile_name = profile_name;
+        }
         std::string connected_key = player_prefix;
         player.connected = ReadBooleanSetting(connected_key.append("connected"),
                                               std::make_optional(player_index == 0));
@@ -412,6 +430,11 @@ void Config::SavePlayerValues(const std::size_t player_index) {
         std::make_optional(static_cast<u8>(Settings::ControllerType::ProController)));
 
     if (!player_prefix.empty() || !Settings::IsConfiguringGlobal()) {
+        if (global) {
+            const auto& player_global = Settings::values.players.GetValue(true)[player_index];
+            WriteStringSetting(std::string(player_prefix).append("profile_name"),
+                               player_global.profile_name, std::make_optional(std::string("")));
+        }
         WriteBooleanSetting(std::string(player_prefix).append("connected"), player.connected,
                             std::make_optional(player_index == 0));
         WriteIntegerSetting(std::string(player_prefix).append("vibration_enabled"),
@@ -468,12 +491,15 @@ void Config::SaveMotionTouchValues() {
 
 void Config::SaveValues() {
     if (global) {
+        LOG_DEBUG(Config, "Saving global generic configuration values");
         SaveDataStorageValues();
         SaveDebuggingValues();
         SaveDisabledAddOnValues();
         SaveNetworkValues();
         SaveWebServiceValues();
         SaveMiscellaneousValues();
+    } else {
+        LOG_DEBUG(Config, "Saving only generic configuration values");
     }
     SaveControlValues();
     SaveCoreValues();
@@ -814,10 +840,6 @@ void Config::Reload() {
     SaveValues();
 }
 
-void Config::Save() {
-    SaveValues();
-}
-
 void Config::ClearControlPlayerValues() const {
     // If key is an empty string, all keys in the current group() are removed.
     const char* section = Settings::TranslateCategory(Settings::Category::Controls);
diff --git a/src/frontend_common/config.h b/src/frontend_common/config.h
index b01631649958..4798d64324ba 100644
--- a/src/frontend_common/config.h
+++ b/src/frontend_common/config.h
@@ -51,7 +51,6 @@ class Config {
     [[nodiscard]] bool IsCustomConfig() const;
 
     void Reload();
-    void Save();
 
     /**
      * Derived config classes must implement this so they can reload all platform-specific
diff --git a/src/yuzu/configuration/configure_input_player.cpp b/src/yuzu/configuration/configure_input_player.cpp
index f3552191a9be..9745757c7c6e 100644
--- a/src/yuzu/configuration/configure_input_player.cpp
+++ b/src/yuzu/configuration/configure_input_player.cpp
@@ -1650,9 +1650,21 @@ void ConfigureInputPlayer::SaveProfile() {
 void ConfigureInputPlayer::UpdateInputProfiles() {
     ui->comboProfiles->clear();
 
-    for (const auto& profile_name : profiles->GetInputProfileNames()) {
+    // Set current profile as empty by default
+    int profile_index = -1;
+
+    // Add every available profile and search the player profile to set it as current one
+    auto& current_profile = Settings::values.players.GetValue()[player_index].profile_name;
+    std::vector<std::string> profile_names = profiles->GetInputProfileNames();
+    std::string profile_name;
+    for (size_t i = 0; i < profile_names.size(); i++) {
+        profile_name = profile_names[i];
         ui->comboProfiles->addItem(QString::fromStdString(profile_name));
+        if (current_profile == profile_name) {
+            profile_index = (int)i;
+        }
     }
 
-    ui->comboProfiles->setCurrentIndex(-1);
+    LOG_DEBUG(Frontend, "Setting the current input profile to index {}", profile_index);
+    ui->comboProfiles->setCurrentIndex(profile_index);
 }
diff --git a/src/yuzu/configuration/input_profiles.cpp b/src/yuzu/configuration/input_profiles.cpp
index 716efbccd3e7..ebebadc94576 100644
--- a/src/yuzu/configuration/input_profiles.cpp
+++ b/src/yuzu/configuration/input_profiles.cpp
@@ -5,6 +5,7 @@
 
 #include "common/fs/fs.h"
 #include "common/fs/path_util.h"
+#include "common/logging/log.h"
 #include "frontend_common/config.h"
 #include "yuzu/configuration/input_profiles.h"
 
@@ -113,6 +114,8 @@ bool InputProfiles::LoadProfile(const std::string& profile_name, std::size_t pla
         return false;
     }
 
+    LOG_INFO(Config, "Loading input profile `{}`", profile_name);
+
     map_profiles[profile_name]->ReadQtControlPlayerValues(player_index);
     return true;
 }
diff --git a/src/yuzu/configuration/qt_config.cpp b/src/yuzu/configuration/qt_config.cpp
index 6aca71d7c45d..1051031f27c9 100644
--- a/src/yuzu/configuration/qt_config.cpp
+++ b/src/yuzu/configuration/qt_config.cpp
@@ -1,6 +1,7 @@
 // SPDX-FileCopyrightText: 2023 yuzu Emulator Project
 // SPDX-License-Identifier: GPL-2.0-or-later
 
+#include "common/logging/log.h"
 #include "input_common/main.h"
 #include "qt_config.h"
 #include "uisettings.h"
@@ -65,7 +66,7 @@ void QtConfig::ReloadAllValues() {
 }
 
 void QtConfig::SaveAllValues() {
-    Save();
+    SaveValues();
     SaveQtValues();
 }
 
@@ -327,7 +328,10 @@ void QtConfig::ReadMultiplayerValues() {
 
 void QtConfig::SaveQtValues() {
     if (global) {
+        LOG_DEBUG(Config, "Saving global Qt configuration values");
         SaveUIValues();
+    } else {
+        LOG_DEBUG(Config, "Saving Qt configuration values");
     }
     SaveQtControlValues();
 
@@ -545,6 +549,7 @@ void QtConfig::ReadQtControlPlayerValues(std::size_t player_index) {
 void QtConfig::SaveQtControlPlayerValues(std::size_t player_index) {
     BeginGroup(Settings::TranslateCategory(Settings::Category::Controls));
 
+    LOG_DEBUG(Config, "Saving players control configuration values");
     SavePlayerValues(player_index);
     SaveQtPlayerValues(player_index);
 
diff --git a/src/yuzu_cmd/sdl_config.cpp b/src/yuzu_cmd/sdl_config.cpp
index e81bf5d45f43..995114510a0d 100644
--- a/src/yuzu_cmd/sdl_config.cpp
+++ b/src/yuzu_cmd/sdl_config.cpp
@@ -5,6 +5,7 @@
 #define SDL_MAIN_HANDLED
 #include <SDL.h>
 
+#include "common/logging/log.h"
 #include "input_common/main.h"
 #include "sdl_config.h"
 
@@ -64,7 +65,7 @@ void SdlConfig::ReloadAllValues() {
 }
 
 void SdlConfig::SaveAllValues() {
-    Save();
+    SaveValues();
     SaveSdlValues();
 }
 
@@ -177,6 +178,7 @@ void SdlConfig::ReadHidbusValues() {
 }
 
 void SdlConfig::SaveSdlValues() {
+    LOG_DEBUG(Config, "Saving SDL configuration values");
     SaveSdlControlValues();
 
     WriteToIni();
