diff --git a/src/audio_core/sink/cubeb_sink.cpp b/src/audio_core/sink/cubeb_sink.cpp
index 04d98a86587..bbb598bc55c 100644
--- a/src/audio_core/sink/cubeb_sink.cpp
+++ b/src/audio_core/sink/cubeb_sink.cpp
@@ -364,7 +364,7 @@ bool IsCubebSuitable() {
     }
 #endif
 
-    // Test min latency
+    // Get min latency
     cubeb_stream_params params{};
     params.rate = TargetSampleRate;
     params.channels = 2;
@@ -380,11 +380,6 @@ bool IsCubebSuitable() {
     }
     latency = std::max(latency, TargetSampleCount * 2);
 
-    if (latency > TargetSampleCount * 3) {
-        LOG_ERROR(Audio_Sink, "Cubeb latency is too high, it is not suitable.");
-        return false;
-    }
-
     // Test opening a device with standard parameters
     cubeb_devid output_device{0};
     cubeb_devid input_device{0};
diff --git a/src/audio_core/sink/sink_details.cpp b/src/audio_core/sink/sink_details.cpp
index 6bec8ee7c4c..7c9a4e3acff 100644
--- a/src/audio_core/sink/sink_details.cpp
+++ b/src/audio_core/sink/sink_details.cpp
@@ -83,8 +83,8 @@ const SinkDetails& GetOutputSinkDetails(Settings::AudioEngine sink_id) {
                 break;
             }
         }
-        LOG_ERROR(Service_Audio, "Auto-selecting the {} backend",
-                  Settings::CanonicalizeEnum(iter->id));
+        LOG_INFO(Service_Audio, "Auto-selecting the {} backend",
+                 Settings::CanonicalizeEnum(iter->id));
     } else {
         if (iter != std::end(sink_details) && !iter->is_suitable()) {
             LOG_ERROR(Service_Audio, "Selected backend {} is not suitable, falling back to null",
