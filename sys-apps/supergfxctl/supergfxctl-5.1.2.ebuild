# Copyright 2023 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

# Auto-Generated by cargo-ebuild 0.5.4-r1

EAPI=8

CRATES="
	addr2line@0.21.0
	adler@1.0.2
	aho-corasick@1.0.5
	async-broadcast@0.5.1
	async-channel@1.9.0
	async-executor@1.5.1
	async-fs@1.6.0
	async-io@1.13.0
	async-lock@2.8.0
	async-process@1.7.0
	async-recursion@1.0.5
	async-task@4.4.0
	async-trait@0.1.73
	atomic-waker@1.1.1
	autocfg@1.1.0
	backtrace@0.3.69
	bitflags@1.3.2
	bitflags@2.4.0
	block-buffer@0.10.4
	blocking@1.3.1
	byteorder@1.4.3
	bytes@1.4.0
	cc@1.0.83
	cfg-if@1.0.0
	concurrent-queue@2.2.0
	cpufeatures@0.2.9
	crossbeam-utils@0.8.16
	crypto-common@0.1.6
	derivative@2.2.0
	digest@0.10.7
	enumflags2@0.7.7
	enumflags2_derive@0.7.7
	env_logger@0.10.0
	equivalent@1.0.1
	errno@0.3.3
	errno-dragonfly@0.1.2
	event-listener@2.5.3
	fastrand@1.9.0
	fastrand@2.0.0
	futures-core@0.3.28
	futures-io@0.3.28
	futures-lite@1.13.0
	futures-sink@0.3.28
	futures-task@0.3.28
	futures-util@0.3.28
	generic-array@0.14.7
	getrandom@0.2.10
	gimli@0.28.0
	gumdrop@0.8.1
	gumdrop_derive@0.8.1
	hashbrown@0.14.0
	hermit-abi@0.3.2
	hex@0.4.3
	humantime@2.1.0
	indexmap@2.0.0
	instant@0.1.12
	io-lifetimes@1.0.11
	is-terminal@0.4.9
	itoa@1.0.9
	libc@0.2.147
	libudev-sys@0.1.4
	linux-raw-sys@0.3.8
	linux-raw-sys@0.4.5
	log@0.4.20
	logind-zbus@3.1.2
	memchr@2.6.3
	memoffset@0.7.1
	miniz_oxide@0.7.1
	mio@0.8.8
	nix@0.26.4
	num_cpus@1.16.0
	object@0.32.1
	once_cell@1.18.0
	ordered-stream@0.2.0
	parking@2.1.0
	pin-project-lite@0.2.13
	pin-utils@0.1.0
	pkg-config@0.3.27
	polling@2.8.0
	ppv-lite86@0.2.17
	proc-macro-crate@1.3.1
	proc-macro2@1.0.66
	quote@1.0.33
	rand@0.8.5
	rand_chacha@0.3.1
	rand_core@0.6.4
	redox_syscall@0.3.5
	regex@1.9.5
	regex-automata@0.3.8
	regex-syntax@0.7.5
	rustc-demangle@0.1.23
	rustix@0.37.23
	rustix@0.38.11
	ryu@1.0.15
	serde@1.0.188
	serde_derive@1.0.188
	serde_json@1.0.105
	serde_repr@0.1.16
	sha1@0.10.5
	signal-hook@0.3.17
	signal-hook-registry@1.4.1
	slab@0.4.9
	socket2@0.4.9
	socket2@0.5.3
	static_assertions@1.1.0
	syn@1.0.109
	syn@2.0.31
	tempfile@3.8.0
	termcolor@1.2.0
	tokio@1.32.0
	tokio-macros@2.1.0
	toml_datetime@0.6.3
	toml_edit@0.19.14
	tracing@0.1.37
	tracing-attributes@0.1.26
	tracing-core@0.1.31
	typenum@1.16.0
	udev@0.7.0
	uds_windows@1.0.2
	unicode-ident@1.0.11
	version_check@0.9.4
	waker-fn@1.1.0
	wasi@0.11.0+wasi-snapshot-preview1
	winapi@0.3.9
	winapi-i686-pc-windows-gnu@0.4.0
	winapi-util@0.1.5
	winapi-x86_64-pc-windows-gnu@0.4.0
	windows-sys@0.48.0
	windows-targets@0.48.5
	windows_aarch64_gnullvm@0.48.5
	windows_aarch64_msvc@0.48.5
	windows_i686_gnu@0.48.5
	windows_i686_msvc@0.48.5
	windows_x86_64_gnu@0.48.5
	windows_x86_64_gnullvm@0.48.5
	windows_x86_64_msvc@0.48.5
	winnow@0.5.15
	xdg-home@1.0.0
	zbus@3.14.1
	zbus_macros@3.14.1
	zbus_names@2.6.0
	zvariant@3.15.0
	zvariant_derive@3.15.0
	zvariant_utils@1.0.1
"

inherit cargo systemd udev

DESCRIPTION="Types useful for fancy keyboards on ASUS ROG laptops"
# Double check the homepage as the cargo_metadata crate
# does not provide this value so instead repository is used
HOMEPAGE="https://gitlab.com/asus-linux/supergfxctl"
SRC_URI="https://gitlab.com/asus-linux/supergfxctl/-/archive/${PV}/supergfxctl-${PV}.tar.bz2
	${CARGO_CRATE_URIS}"

# License set may be more restrictive as OR is not respected
# use cargo-license for a more accurate license picture
LICENSE="0BSD Apache-2.0 Apache-2.0-with-LLVM-exceptions BSD Boost-1.0 MIT MPL-2.0 Unicode-DFS-2016 Unlicense ZLIB"
SLOT="0"
KEYWORDS="~amd64"

DEPEND=""
RDEPEND="${DEPEND}"
BDEPEND=""

PATCHES=( "${FILESDIR}/systemd.patch" )
# rust does not use *FLAGS from make.conf, silence portage warning
# update with proper path to binaries this crate installs, omit leading /
QA_FLAGS_IGNORED="usr/bin/${PN}"

#src_unpack() {
#	if [[ -n ${A} ]]; then
#		unpack ${A}
#	fi
#	cargo_gen_config
#	cargo_src_unpack
#	sed -e 's#$(DESTDIR)$(libdir)/systemd/system/$(SERVICE)#$(DESTDIR)/lib/systemd/system/$(SERVICE)#g' -i ${P}/Makefile
#	sed -e 's#$(DESTDIR)$(libdir)/systemd/system-preset/$(PRESET)#$(DESTDIR)/lib/systemd/system-preset/$(PRESET)#g' -i ${P}/Makefile
#}

#src_compile() {
#	sed -e 's#$(DESTDIR)$(libdir)/systemd/system/$(SERVICE)#$(DESTDIR)/lib/systemd/system/$(SERVICE)#g' -i ${P}/Makefile
#	sed -e 's#$(DESTDIR)$(libdir)/systemd/system-preset/$(PRESET)#$(DESTDIR)/lib/systemd/system-preset/$(PRESET)#g' -i ${P}/Makefile
#	emake
#}

src_install() {
	emake DESTDIR="${D}" install
	systemd_dounit "${WORKDIR}/${P}/data/supergfxd.service"
}

pkg_postinst() {
	udev_reload
}

pkg_postrm() {
	udev_reload
}
