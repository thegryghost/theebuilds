diff --git a/src/core/CMakeLists.txt b/src/core/CMakeLists.txt
index fa5c4de37e48..a54325f682ad 100644
--- a/src/core/CMakeLists.txt
+++ b/src/core/CMakeLists.txt
@@ -481,8 +481,10 @@ add_library(core STATIC
     hle/service/am/service/system_applet_proxy.h
     hle/service/am/service/window_controller.cpp
     hle/service/am/service/window_controller.h
-    hle/service/aoc/aoc_u.cpp
-    hle/service/aoc/aoc_u.h
+    hle/service/aoc/addon_content_manager.cpp
+    hle/service/aoc/addon_content_manager.h
+    hle/service/aoc/purchase_event_manager.cpp
+    hle/service/aoc/purchase_event_manager.h
     hle/service/apm/apm.cpp
     hle/service/apm/apm.h
     hle/service/apm/apm_controller.cpp
diff --git a/src/core/hle/service/aoc/addon_content_manager.cpp b/src/core/hle/service/aoc/addon_content_manager.cpp
new file mode 100644
index 000000000000..3a7741371170
--- /dev/null
+++ b/src/core/hle/service/aoc/addon_content_manager.cpp
@@ -0,0 +1,223 @@
+// SPDX-FileCopyrightText: Copyright 2018 yuzu Emulator Project
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+#include <algorithm>
+#include <numeric>
+#include <vector>
+
+#include "common/logging/log.h"
+#include "common/settings.h"
+#include "core/core.h"
+#include "core/file_sys/common_funcs.h"
+#include "core/file_sys/content_archive.h"
+#include "core/file_sys/control_metadata.h"
+#include "core/file_sys/nca_metadata.h"
+#include "core/file_sys/patch_manager.h"
+#include "core/file_sys/registered_cache.h"
+#include "core/hle/kernel/k_event.h"
+#include "core/hle/service/aoc/addon_content_manager.h"
+#include "core/hle/service/aoc/purchase_event_manager.h"
+#include "core/hle/service/cmif_serialization.h"
+#include "core/hle/service/ipc_helpers.h"
+#include "core/hle/service/server_manager.h"
+#include "core/loader/loader.h"
+
+namespace Service::AOC {
+
+static bool CheckAOCTitleIDMatchesBase(u64 title_id, u64 base) {
+    return FileSys::GetBaseTitleID(title_id) == base;
+}
+
+static std::vector<u64> AccumulateAOCTitleIDs(Core::System& system) {
+    std::vector<u64> add_on_content;
+    const auto& rcu = system.GetContentProvider();
+    const auto list =
+        rcu.ListEntriesFilter(FileSys::TitleType::AOC, FileSys::ContentRecordType::Data);
+    std::transform(list.begin(), list.end(), std::back_inserter(add_on_content),
+                   [](const FileSys::ContentProviderEntry& rce) { return rce.title_id; });
+    add_on_content.erase(
+        std::remove_if(
+            add_on_content.begin(), add_on_content.end(),
+            [&rcu](u64 tid) {
+                return rcu.GetEntry(tid, FileSys::ContentRecordType::Data)->GetStatus() !=
+                       Loader::ResultStatus::Success;
+            }),
+        add_on_content.end());
+    return add_on_content;
+}
+
+IAddOnContentManager::IAddOnContentManager(Core::System& system_)
+    : ServiceFramework{system_, "aoc:u"}, add_on_content{AccumulateAOCTitleIDs(system)},
+      service_context{system_, "aoc:u"} {
+    // clang-format off
+    static const FunctionInfo functions[] = {
+        {0, nullptr, "CountAddOnContentByApplicationId"},
+        {1, nullptr, "ListAddOnContentByApplicationId"},
+        {2, D<&IAddOnContentManager::CountAddOnContent>, "CountAddOnContent"},
+        {3, D<&IAddOnContentManager::ListAddOnContent>, "ListAddOnContent"},
+        {4, nullptr, "GetAddOnContentBaseIdByApplicationId"},
+        {5, D<&IAddOnContentManager::GetAddOnContentBaseId>, "GetAddOnContentBaseId"},
+        {6, nullptr, "PrepareAddOnContentByApplicationId"},
+        {7, D<&IAddOnContentManager::PrepareAddOnContent>, "PrepareAddOnContent"},
+        {8, D<&IAddOnContentManager::GetAddOnContentListChangedEvent>, "GetAddOnContentListChangedEvent"},
+        {9, nullptr, "GetAddOnContentLostErrorCode"},
+        {10, D<&IAddOnContentManager::GetAddOnContentListChangedEventWithProcessId>, "GetAddOnContentListChangedEventWithProcessId"},
+        {11, D<&IAddOnContentManager::NotifyMountAddOnContent>, "NotifyMountAddOnContent"},
+        {12, D<&IAddOnContentManager::NotifyUnmountAddOnContent>, "NotifyUnmountAddOnContent"},
+        {13, nullptr, "IsAddOnContentMountedForDebug"},
+        {50, D<&IAddOnContentManager::CheckAddOnContentMountStatus>, "CheckAddOnContentMountStatus"},
+        {100, D<&IAddOnContentManager::CreateEcPurchasedEventManager>, "CreateEcPurchasedEventManager"},
+        {101, D<&IAddOnContentManager::CreatePermanentEcPurchasedEventManager>, "CreatePermanentEcPurchasedEventManager"},
+        {110, nullptr, "CreateContentsServiceManager"},
+        {200, nullptr, "SetRequiredAddOnContentsOnContentsAvailabilityTransition"},
+        {300, nullptr, "SetupHostAddOnContent"},
+        {301, nullptr, "GetRegisteredAddOnContentPath"},
+        {302, nullptr, "UpdateCachedList"},
+    };
+    // clang-format on
+
+    RegisterHandlers(functions);
+
+    aoc_change_event = service_context.CreateEvent("GetAddOnContentListChanged:Event");
+}
+
+IAddOnContentManager::~IAddOnContentManager() {
+    service_context.CloseEvent(aoc_change_event);
+}
+
+Result IAddOnContentManager::CountAddOnContent(Out<u32> out_count, ClientProcessId process_id) {
+    LOG_DEBUG(Service_AOC, "called. process_id={}", process_id.pid);
+
+    const auto current = system.GetApplicationProcessProgramID();
+
+    const auto& disabled = Settings::values.disabled_addons[current];
+    if (std::find(disabled.begin(), disabled.end(), "DLC") != disabled.end()) {
+        *out_count = 0;
+        R_SUCCEED();
+    }
+
+    *out_count = static_cast<u32>(
+        std::count_if(add_on_content.begin(), add_on_content.end(),
+                      [current](u64 tid) { return CheckAOCTitleIDMatchesBase(tid, current); }));
+
+    R_SUCCEED();
+}
+
+Result IAddOnContentManager::ListAddOnContent(Out<u32> out_count,
+                                              OutBuffer<BufferAttr_HipcMapAlias> out_addons,
+                                              u32 offset, u32 count, ClientProcessId process_id) {
+    LOG_DEBUG(Service_AOC, "called with offset={}, count={}, process_id={}", offset, count,
+              process_id.pid);
+
+    const auto current = FileSys::GetBaseTitleID(system.GetApplicationProcessProgramID());
+
+    std::vector<u32> out;
+    const auto& disabled = Settings::values.disabled_addons[current];
+    if (std::find(disabled.begin(), disabled.end(), "DLC") == disabled.end()) {
+        for (u64 content_id : add_on_content) {
+            if (FileSys::GetBaseTitleID(content_id) != current) {
+                continue;
+            }
+
+            out.push_back(static_cast<u32>(FileSys::GetAOCID(content_id)));
+        }
+    }
+
+    // TODO(DarkLordZach): Find the correct error code.
+    R_UNLESS(out.size() >= offset, ResultUnknown);
+
+    *out_count = static_cast<u32>(std::min<size_t>(out.size() - offset, count));
+    std::rotate(out.begin(), out.begin() + offset, out.end());
+
+    std::memcpy(out_addons.data(), out.data(), *out_count);
+
+    R_SUCCEED();
+}
+
+Result IAddOnContentManager::GetAddOnContentBaseId(Out<u64> out_title_id,
+                                                   ClientProcessId process_id) {
+    LOG_DEBUG(Service_AOC, "called. process_id={}", process_id.pid);
+
+    const auto title_id = system.GetApplicationProcessProgramID();
+    const FileSys::PatchManager pm{title_id, system.GetFileSystemController(),
+                                   system.GetContentProvider()};
+
+    const auto res = pm.GetControlMetadata();
+    if (res.first == nullptr) {
+        *out_title_id = FileSys::GetAOCBaseTitleID(title_id);
+        R_SUCCEED();
+    }
+
+    *out_title_id = res.first->GetDLCBaseTitleId();
+
+    R_SUCCEED();
+}
+
+Result IAddOnContentManager::PrepareAddOnContent(s32 addon_index, ClientProcessId process_id) {
+    LOG_WARNING(Service_AOC, "(STUBBED) called with addon_index={}, process_id={}", addon_index,
+                process_id.pid);
+
+    R_SUCCEED();
+}
+
+Result IAddOnContentManager::GetAddOnContentListChangedEvent(
+    OutCopyHandle<Kernel::KReadableEvent> out_event) {
+    LOG_WARNING(Service_AOC, "(STUBBED) called");
+
+    *out_event = &aoc_change_event->GetReadableEvent();
+
+    R_SUCCEED();
+}
+
+Result IAddOnContentManager::GetAddOnContentListChangedEventWithProcessId(
+    OutCopyHandle<Kernel::KReadableEvent> out_event, ClientProcessId process_id) {
+    LOG_WARNING(Service_AOC, "(STUBBED) called");
+
+    *out_event = &aoc_change_event->GetReadableEvent();
+
+    R_SUCCEED();
+}
+
+Result IAddOnContentManager::NotifyMountAddOnContent() {
+    LOG_WARNING(Service_AOC, "(STUBBED) called");
+
+    R_SUCCEED();
+}
+
+Result IAddOnContentManager::NotifyUnmountAddOnContent() {
+    LOG_WARNING(Service_AOC, "(STUBBED) called");
+
+    R_SUCCEED();
+}
+
+Result IAddOnContentManager::CheckAddOnContentMountStatus() {
+    LOG_WARNING(Service_AOC, "(STUBBED) called");
+
+    R_SUCCEED();
+}
+
+Result IAddOnContentManager::CreateEcPurchasedEventManager(
+    OutInterface<IPurchaseEventManager> out_interface) {
+    LOG_WARNING(Service_AOC, "(STUBBED) called");
+
+    *out_interface = std::make_shared<IPurchaseEventManager>(system);
+
+    R_SUCCEED();
+}
+
+Result IAddOnContentManager::CreatePermanentEcPurchasedEventManager(
+    OutInterface<IPurchaseEventManager> out_interface) {
+    LOG_WARNING(Service_AOC, "(STUBBED) called");
+
+    *out_interface = std::make_shared<IPurchaseEventManager>(system);
+
+    R_SUCCEED();
+}
+
+void LoopProcess(Core::System& system) {
+    auto server_manager = std::make_unique<ServerManager>(system);
+    server_manager->RegisterNamedService("aoc:u", std::make_shared<IAddOnContentManager>(system));
+    ServerManager::RunServer(std::move(server_manager));
+}
+
+} // namespace Service::AOC
diff --git a/src/core/hle/service/aoc/addon_content_manager.h b/src/core/hle/service/aoc/addon_content_manager.h
new file mode 100644
index 000000000000..91857df4c7d5
--- /dev/null
+++ b/src/core/hle/service/aoc/addon_content_manager.h
@@ -0,0 +1,51 @@
+// SPDX-FileCopyrightText: Copyright 2018 yuzu Emulator Project
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+#pragma once
+
+#include "core/hle/service/cmif_types.h"
+#include "core/hle/service/kernel_helpers.h"
+#include "core/hle/service/service.h"
+
+namespace Core {
+class System;
+}
+
+namespace Kernel {
+class KEvent;
+}
+
+namespace Service::AOC {
+
+class IPurchaseEventManager;
+
+class IAddOnContentManager final : public ServiceFramework<IAddOnContentManager> {
+public:
+    explicit IAddOnContentManager(Core::System& system);
+    ~IAddOnContentManager() override;
+
+    Result CountAddOnContent(Out<u32> out_count, ClientProcessId process_id);
+    Result ListAddOnContent(Out<u32> out_count, OutBuffer<BufferAttr_HipcMapAlias> out_addons,
+                            u32 offset, u32 count, ClientProcessId process_id);
+    Result GetAddOnContentBaseId(Out<u64> out_title_id, ClientProcessId process_id);
+    Result PrepareAddOnContent(s32 addon_index, ClientProcessId process_id);
+    Result GetAddOnContentListChangedEvent(OutCopyHandle<Kernel::KReadableEvent> out_event);
+    Result GetAddOnContentListChangedEventWithProcessId(
+        OutCopyHandle<Kernel::KReadableEvent> out_event, ClientProcessId process_id);
+    Result NotifyMountAddOnContent();
+    Result NotifyUnmountAddOnContent();
+    Result CheckAddOnContentMountStatus();
+    Result CreateEcPurchasedEventManager(OutInterface<IPurchaseEventManager> out_interface);
+    Result CreatePermanentEcPurchasedEventManager(
+        OutInterface<IPurchaseEventManager> out_interface);
+
+private:
+    std::vector<u64> add_on_content;
+    KernelHelpers::ServiceContext service_context;
+
+    Kernel::KEvent* aoc_change_event;
+};
+
+void LoopProcess(Core::System& system);
+
+} // namespace Service::AOC
diff --git a/src/core/hle/service/aoc/aoc_u.cpp b/src/core/hle/service/aoc/aoc_u.cpp
deleted file mode 100644
index 486719cc090c..000000000000
--- a/src/core/hle/service/aoc/aoc_u.cpp
+++ /dev/null
@@ -1,340 +0,0 @@
-// SPDX-FileCopyrightText: Copyright 2018 yuzu Emulator Project
-// SPDX-License-Identifier: GPL-2.0-or-later
-
-#include <algorithm>
-#include <numeric>
-#include <vector>
-
-#include "common/logging/log.h"
-#include "common/settings.h"
-#include "core/core.h"
-#include "core/file_sys/common_funcs.h"
-#include "core/file_sys/content_archive.h"
-#include "core/file_sys/control_metadata.h"
-#include "core/file_sys/nca_metadata.h"
-#include "core/file_sys/patch_manager.h"
-#include "core/file_sys/registered_cache.h"
-#include "core/hle/kernel/k_event.h"
-#include "core/hle/service/aoc/aoc_u.h"
-#include "core/hle/service/ipc_helpers.h"
-#include "core/hle/service/server_manager.h"
-#include "core/loader/loader.h"
-
-namespace Service::AOC {
-
-constexpr Result ResultNoPurchasedProductInfoAvailable{ErrorModule::NIMShop, 400};
-
-static bool CheckAOCTitleIDMatchesBase(u64 title_id, u64 base) {
-    return FileSys::GetBaseTitleID(title_id) == base;
-}
-
-static std::vector<u64> AccumulateAOCTitleIDs(Core::System& system) {
-    std::vector<u64> add_on_content;
-    const auto& rcu = system.GetContentProvider();
-    const auto list =
-        rcu.ListEntriesFilter(FileSys::TitleType::AOC, FileSys::ContentRecordType::Data);
-    std::transform(list.begin(), list.end(), std::back_inserter(add_on_content),
-                   [](const FileSys::ContentProviderEntry& rce) { return rce.title_id; });
-    add_on_content.erase(
-        std::remove_if(
-            add_on_content.begin(), add_on_content.end(),
-            [&rcu](u64 tid) {
-                return rcu.GetEntry(tid, FileSys::ContentRecordType::Data)->GetStatus() !=
-                       Loader::ResultStatus::Success;
-            }),
-        add_on_content.end());
-    return add_on_content;
-}
-
-class IPurchaseEventManager final : public ServiceFramework<IPurchaseEventManager> {
-public:
-    explicit IPurchaseEventManager(Core::System& system_)
-        : ServiceFramework{system_, "IPurchaseEventManager"}, service_context{
-                                                                  system, "IPurchaseEventManager"} {
-        // clang-format off
-        static const FunctionInfo functions[] = {
-            {0, &IPurchaseEventManager::SetDefaultDeliveryTarget, "SetDefaultDeliveryTarget"},
-            {1, &IPurchaseEventManager::SetDeliveryTarget, "SetDeliveryTarget"},
-            {2, &IPurchaseEventManager::GetPurchasedEventReadableHandle, "GetPurchasedEventReadableHandle"},
-            {3, &IPurchaseEventManager::PopPurchasedProductInfo, "PopPurchasedProductInfo"},
-            {4, &IPurchaseEventManager::PopPurchasedProductInfoWithUid, "PopPurchasedProductInfoWithUid"},
-        };
-        // clang-format on
-
-        RegisterHandlers(functions);
-
-        purchased_event = service_context.CreateEvent("IPurchaseEventManager:PurchasedEvent");
-    }
-
-    ~IPurchaseEventManager() override {
-        service_context.CloseEvent(purchased_event);
-    }
-
-private:
-    void SetDefaultDeliveryTarget(HLERequestContext& ctx) {
-        IPC::RequestParser rp{ctx};
-
-        const auto unknown_1 = rp.Pop<u64>();
-        [[maybe_unused]] const auto unknown_2 = ctx.ReadBuffer();
-
-        LOG_WARNING(Service_AOC, "(STUBBED) called, unknown_1={}", unknown_1);
-
-        IPC::ResponseBuilder rb{ctx, 2};
-        rb.Push(ResultSuccess);
-    }
-
-    void SetDeliveryTarget(HLERequestContext& ctx) {
-        IPC::RequestParser rp{ctx};
-
-        const auto unknown_1 = rp.Pop<u64>();
-        [[maybe_unused]] const auto unknown_2 = ctx.ReadBuffer();
-
-        LOG_WARNING(Service_AOC, "(STUBBED) called, unknown_1={}", unknown_1);
-
-        IPC::ResponseBuilder rb{ctx, 2};
-        rb.Push(ResultSuccess);
-    }
-
-    void GetPurchasedEventReadableHandle(HLERequestContext& ctx) {
-        LOG_WARNING(Service_AOC, "called");
-
-        IPC::ResponseBuilder rb{ctx, 2, 1};
-        rb.Push(ResultSuccess);
-        rb.PushCopyObjects(purchased_event->GetReadableEvent());
-    }
-
-    void PopPurchasedProductInfo(HLERequestContext& ctx) {
-        LOG_DEBUG(Service_AOC, "(STUBBED) called");
-
-        IPC::ResponseBuilder rb{ctx, 2};
-        rb.Push(ResultNoPurchasedProductInfoAvailable);
-    }
-
-    void PopPurchasedProductInfoWithUid(HLERequestContext& ctx) {
-        LOG_DEBUG(Service_AOC, "(STUBBED) called");
-
-        IPC::ResponseBuilder rb{ctx, 2};
-        rb.Push(ResultNoPurchasedProductInfoAvailable);
-    }
-
-    KernelHelpers::ServiceContext service_context;
-
-    Kernel::KEvent* purchased_event;
-};
-
-AOC_U::AOC_U(Core::System& system_)
-    : ServiceFramework{system_, "aoc:u"}, add_on_content{AccumulateAOCTitleIDs(system)},
-      service_context{system_, "aoc:u"} {
-    // clang-format off
-    static const FunctionInfo functions[] = {
-        {0, nullptr, "CountAddOnContentByApplicationId"},
-        {1, nullptr, "ListAddOnContentByApplicationId"},
-        {2, &AOC_U::CountAddOnContent, "CountAddOnContent"},
-        {3, &AOC_U::ListAddOnContent, "ListAddOnContent"},
-        {4, nullptr, "GetAddOnContentBaseIdByApplicationId"},
-        {5, &AOC_U::GetAddOnContentBaseId, "GetAddOnContentBaseId"},
-        {6, nullptr, "PrepareAddOnContentByApplicationId"},
-        {7, &AOC_U::PrepareAddOnContent, "PrepareAddOnContent"},
-        {8, &AOC_U::GetAddOnContentListChangedEvent, "GetAddOnContentListChangedEvent"},
-        {9, nullptr, "GetAddOnContentLostErrorCode"},
-        {10, &AOC_U::GetAddOnContentListChangedEventWithProcessId, "GetAddOnContentListChangedEventWithProcessId"},
-        {11, &AOC_U::NotifyMountAddOnContent, "NotifyMountAddOnContent"},
-        {12, &AOC_U::NotifyUnmountAddOnContent, "NotifyUnmountAddOnContent"},
-        {13, nullptr, "IsAddOnContentMountedForDebug"},
-        {50, &AOC_U::CheckAddOnContentMountStatus, "CheckAddOnContentMountStatus"},
-        {100, &AOC_U::CreateEcPurchasedEventManager, "CreateEcPurchasedEventManager"},
-        {101, &AOC_U::CreatePermanentEcPurchasedEventManager, "CreatePermanentEcPurchasedEventManager"},
-        {110, nullptr, "CreateContentsServiceManager"},
-        {200, nullptr, "SetRequiredAddOnContentsOnContentsAvailabilityTransition"},
-        {300, nullptr, "SetupHostAddOnContent"},
-        {301, nullptr, "GetRegisteredAddOnContentPath"},
-        {302, nullptr, "UpdateCachedList"},
-    };
-    // clang-format on
-
-    RegisterHandlers(functions);
-
-    aoc_change_event = service_context.CreateEvent("GetAddOnContentListChanged:Event");
-}
-
-AOC_U::~AOC_U() {
-    service_context.CloseEvent(aoc_change_event);
-}
-
-void AOC_U::CountAddOnContent(HLERequestContext& ctx) {
-    struct Parameters {
-        u64 process_id;
-    };
-    static_assert(sizeof(Parameters) == 8);
-
-    IPC::RequestParser rp{ctx};
-    const auto params = rp.PopRaw<Parameters>();
-
-    LOG_DEBUG(Service_AOC, "called. process_id={}", params.process_id);
-
-    IPC::ResponseBuilder rb{ctx, 3};
-    rb.Push(ResultSuccess);
-
-    const auto current = system.GetApplicationProcessProgramID();
-
-    const auto& disabled = Settings::values.disabled_addons[current];
-    if (std::find(disabled.begin(), disabled.end(), "DLC") != disabled.end()) {
-        rb.Push<u32>(0);
-        return;
-    }
-
-    rb.Push<u32>(static_cast<u32>(
-        std::count_if(add_on_content.begin(), add_on_content.end(),
-                      [current](u64 tid) { return CheckAOCTitleIDMatchesBase(tid, current); })));
-}
-
-void AOC_U::ListAddOnContent(HLERequestContext& ctx) {
-    struct Parameters {
-        u32 offset;
-        u32 count;
-        u64 process_id;
-    };
-    static_assert(sizeof(Parameters) == 16);
-
-    IPC::RequestParser rp{ctx};
-    const auto [offset, count, process_id] = rp.PopRaw<Parameters>();
-
-    LOG_DEBUG(Service_AOC, "called with offset={}, count={}, process_id={}", offset, count,
-              process_id);
-
-    const auto current = FileSys::GetBaseTitleID(system.GetApplicationProcessProgramID());
-
-    std::vector<u32> out;
-    const auto& disabled = Settings::values.disabled_addons[current];
-    if (std::find(disabled.begin(), disabled.end(), "DLC") == disabled.end()) {
-        for (u64 content_id : add_on_content) {
-            if (FileSys::GetBaseTitleID(content_id) != current) {
-                continue;
-            }
-
-            out.push_back(static_cast<u32>(FileSys::GetAOCID(content_id)));
-        }
-    }
-
-    if (out.size() < offset) {
-        IPC::ResponseBuilder rb{ctx, 2};
-        // TODO(DarkLordZach): Find the correct error code.
-        rb.Push(ResultUnknown);
-        return;
-    }
-
-    const auto out_count = static_cast<u32>(std::min<size_t>(out.size() - offset, count));
-    std::rotate(out.begin(), out.begin() + offset, out.end());
-    out.resize(out_count);
-
-    ctx.WriteBuffer(out);
-
-    IPC::ResponseBuilder rb{ctx, 3};
-    rb.Push(ResultSuccess);
-    rb.Push(out_count);
-}
-
-void AOC_U::GetAddOnContentBaseId(HLERequestContext& ctx) {
-    struct Parameters {
-        u64 process_id;
-    };
-    static_assert(sizeof(Parameters) == 8);
-
-    IPC::RequestParser rp{ctx};
-    const auto params = rp.PopRaw<Parameters>();
-
-    LOG_DEBUG(Service_AOC, "called. process_id={}", params.process_id);
-
-    IPC::ResponseBuilder rb{ctx, 4};
-    rb.Push(ResultSuccess);
-
-    const auto title_id = system.GetApplicationProcessProgramID();
-    const FileSys::PatchManager pm{title_id, system.GetFileSystemController(),
-                                   system.GetContentProvider()};
-
-    const auto res = pm.GetControlMetadata();
-    if (res.first == nullptr) {
-        rb.Push(FileSys::GetAOCBaseTitleID(title_id));
-        return;
-    }
-
-    rb.Push(res.first->GetDLCBaseTitleId());
-}
-
-void AOC_U::PrepareAddOnContent(HLERequestContext& ctx) {
-    struct Parameters {
-        s32 addon_index;
-        u64 process_id;
-    };
-    static_assert(sizeof(Parameters) == 16);
-
-    IPC::RequestParser rp{ctx};
-    const auto [addon_index, process_id] = rp.PopRaw<Parameters>();
-
-    LOG_WARNING(Service_AOC, "(STUBBED) called with addon_index={}, process_id={}", addon_index,
-                process_id);
-
-    IPC::ResponseBuilder rb{ctx, 2};
-    rb.Push(ResultSuccess);
-}
-
-void AOC_U::GetAddOnContentListChangedEvent(HLERequestContext& ctx) {
-    LOG_WARNING(Service_AOC, "(STUBBED) called");
-
-    IPC::ResponseBuilder rb{ctx, 2, 1};
-    rb.Push(ResultSuccess);
-    rb.PushCopyObjects(aoc_change_event->GetReadableEvent());
-}
-
-void AOC_U::GetAddOnContentListChangedEventWithProcessId(HLERequestContext& ctx) {
-    LOG_WARNING(Service_AOC, "(STUBBED) called");
-
-    IPC::ResponseBuilder rb{ctx, 2, 1};
-    rb.Push(ResultSuccess);
-    rb.PushCopyObjects(aoc_change_event->GetReadableEvent());
-}
-
-void AOC_U::NotifyMountAddOnContent(HLERequestContext& ctx) {
-    LOG_WARNING(Service_AOC, "(STUBBED) called");
-
-    IPC::ResponseBuilder rb{ctx, 2};
-    rb.Push(ResultSuccess);
-}
-
-void AOC_U::NotifyUnmountAddOnContent(HLERequestContext& ctx) {
-    LOG_WARNING(Service_AOC, "(STUBBED) called");
-
-    IPC::ResponseBuilder rb{ctx, 2};
-    rb.Push(ResultSuccess);
-}
-
-void AOC_U::CheckAddOnContentMountStatus(HLERequestContext& ctx) {
-    LOG_WARNING(Service_AOC, "(STUBBED) called");
-
-    IPC::ResponseBuilder rb{ctx, 2};
-    rb.Push(ResultSuccess);
-}
-
-void AOC_U::CreateEcPurchasedEventManager(HLERequestContext& ctx) {
-    LOG_WARNING(Service_AOC, "(STUBBED) called");
-
-    IPC::ResponseBuilder rb{ctx, 2, 0, 1};
-    rb.Push(ResultSuccess);
-    rb.PushIpcInterface<IPurchaseEventManager>(system);
-}
-
-void AOC_U::CreatePermanentEcPurchasedEventManager(HLERequestContext& ctx) {
-    LOG_WARNING(Service_AOC, "(STUBBED) called");
-
-    IPC::ResponseBuilder rb{ctx, 2, 0, 1};
-    rb.Push(ResultSuccess);
-    rb.PushIpcInterface<IPurchaseEventManager>(system);
-}
-
-void LoopProcess(Core::System& system) {
-    auto server_manager = std::make_unique<ServerManager>(system);
-    server_manager->RegisterNamedService("aoc:u", std::make_shared<AOC_U>(system));
-    ServerManager::RunServer(std::move(server_manager));
-}
-
-} // namespace Service::AOC
diff --git a/src/core/hle/service/aoc/aoc_u.h b/src/core/hle/service/aoc/aoc_u.h
deleted file mode 100644
index 12ccfeb6a375..000000000000
--- a/src/core/hle/service/aoc/aoc_u.h
+++ /dev/null
@@ -1,45 +0,0 @@
-// SPDX-FileCopyrightText: Copyright 2018 yuzu Emulator Project
-// SPDX-License-Identifier: GPL-2.0-or-later
-
-#pragma once
-
-#include "core/hle/service/kernel_helpers.h"
-#include "core/hle/service/service.h"
-
-namespace Core {
-class System;
-}
-
-namespace Kernel {
-class KEvent;
-}
-
-namespace Service::AOC {
-
-class AOC_U final : public ServiceFramework<AOC_U> {
-public:
-    explicit AOC_U(Core::System& system);
-    ~AOC_U() override;
-
-private:
-    void CountAddOnContent(HLERequestContext& ctx);
-    void ListAddOnContent(HLERequestContext& ctx);
-    void GetAddOnContentBaseId(HLERequestContext& ctx);
-    void PrepareAddOnContent(HLERequestContext& ctx);
-    void GetAddOnContentListChangedEvent(HLERequestContext& ctx);
-    void GetAddOnContentListChangedEventWithProcessId(HLERequestContext& ctx);
-    void NotifyMountAddOnContent(HLERequestContext& ctx);
-    void NotifyUnmountAddOnContent(HLERequestContext& ctx);
-    void CheckAddOnContentMountStatus(HLERequestContext& ctx);
-    void CreateEcPurchasedEventManager(HLERequestContext& ctx);
-    void CreatePermanentEcPurchasedEventManager(HLERequestContext& ctx);
-
-    std::vector<u64> add_on_content;
-    KernelHelpers::ServiceContext service_context;
-
-    Kernel::KEvent* aoc_change_event;
-};
-
-void LoopProcess(Core::System& system);
-
-} // namespace Service::AOC
diff --git a/src/core/hle/service/aoc/purchase_event_manager.cpp b/src/core/hle/service/aoc/purchase_event_manager.cpp
new file mode 100644
index 000000000000..9e718510b449
--- /dev/null
+++ b/src/core/hle/service/aoc/purchase_event_manager.cpp
@@ -0,0 +1,67 @@
+// SPDX-FileCopyrightText: Copyright 2018 yuzu Emulator Project
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+#include "core/hle/service/aoc/purchase_event_manager.h"
+#include "core/hle/service/cmif_serialization.h"
+
+namespace Service::AOC {
+
+constexpr Result ResultNoPurchasedProductInfoAvailable{ErrorModule::NIMShop, 400};
+
+IPurchaseEventManager::IPurchaseEventManager(Core::System& system_)
+    : ServiceFramework{system_, "IPurchaseEventManager"}, service_context{system,
+                                                                          "IPurchaseEventManager"} {
+    // clang-format off
+        static const FunctionInfo functions[] = {
+            {0, D<&IPurchaseEventManager::SetDefaultDeliveryTarget>, "SetDefaultDeliveryTarget"},
+            {1, D<&IPurchaseEventManager::SetDeliveryTarget>, "SetDeliveryTarget"},
+            {2, D<&IPurchaseEventManager::GetPurchasedEvent>, "GetPurchasedEvent"},
+            {3, D<&IPurchaseEventManager::PopPurchasedProductInfo>, "PopPurchasedProductInfo"},
+            {4, D<&IPurchaseEventManager::PopPurchasedProductInfoWithUid>, "PopPurchasedProductInfoWithUid"},
+        };
+    // clang-format on
+
+    RegisterHandlers(functions);
+
+    purchased_event = service_context.CreateEvent("IPurchaseEventManager:PurchasedEvent");
+}
+
+IPurchaseEventManager::~IPurchaseEventManager() {
+    service_context.CloseEvent(purchased_event);
+}
+
+Result IPurchaseEventManager::SetDefaultDeliveryTarget(
+    ClientProcessId process_id, InBuffer<BufferAttr_HipcMapAlias> in_buffer) {
+    LOG_WARNING(Service_AOC, "(STUBBED) called, process_id={}", process_id.pid);
+
+    R_SUCCEED();
+}
+
+Result IPurchaseEventManager::SetDeliveryTarget(u64 unknown,
+                                                InBuffer<BufferAttr_HipcMapAlias> in_buffer) {
+    LOG_WARNING(Service_AOC, "(STUBBED) called, unknown={}", unknown);
+
+    R_SUCCEED();
+}
+
+Result IPurchaseEventManager::GetPurchasedEvent(OutCopyHandle<Kernel::KReadableEvent> out_event) {
+    LOG_WARNING(Service_AOC, "called");
+
+    *out_event = &purchased_event->GetReadableEvent();
+
+    R_SUCCEED();
+}
+
+Result IPurchaseEventManager::PopPurchasedProductInfo() {
+    LOG_DEBUG(Service_AOC, "(STUBBED) called");
+
+    R_RETURN(ResultNoPurchasedProductInfoAvailable);
+}
+
+Result IPurchaseEventManager::PopPurchasedProductInfoWithUid() {
+    LOG_DEBUG(Service_AOC, "(STUBBED) called");
+
+    R_RETURN(ResultNoPurchasedProductInfoAvailable);
+}
+
+} // namespace Service::AOC
diff --git a/src/core/hle/service/aoc/purchase_event_manager.h b/src/core/hle/service/aoc/purchase_event_manager.h
new file mode 100644
index 000000000000..ea3836bc939d
--- /dev/null
+++ b/src/core/hle/service/aoc/purchase_event_manager.h
@@ -0,0 +1,30 @@
+// SPDX-FileCopyrightText: Copyright 2018 yuzu Emulator Project
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+#pragma once
+
+#include "core/hle/service/cmif_types.h"
+#include "core/hle/service/kernel_helpers.h"
+#include "core/hle/service/os/event.h"
+#include "core/hle/service/service.h"
+
+namespace Service::AOC {
+
+class IPurchaseEventManager final : public ServiceFramework<IPurchaseEventManager> {
+public:
+    explicit IPurchaseEventManager(Core::System& system_);
+    ~IPurchaseEventManager() override;
+
+    Result SetDefaultDeliveryTarget(ClientProcessId process_id,
+                                    InBuffer<BufferAttr_HipcMapAlias> in_buffer);
+    Result SetDeliveryTarget(u64 unknown, InBuffer<BufferAttr_HipcMapAlias> in_buffer);
+    Result GetPurchasedEvent(OutCopyHandle<Kernel::KReadableEvent> out_event);
+    Result PopPurchasedProductInfo();
+    Result PopPurchasedProductInfoWithUid();
+
+private:
+    KernelHelpers::ServiceContext service_context;
+    Kernel::KEvent* purchased_event;
+};
+
+} // namespace Service::AOC
diff --git a/src/core/hle/service/services.cpp b/src/core/hle/service/services.cpp
index d6c6eff5008c..a2a3e556c1a5 100644
--- a/src/core/hle/service/services.cpp
+++ b/src/core/hle/service/services.cpp
@@ -5,7 +5,7 @@
 
 #include "core/hle/service/acc/acc.h"
 #include "core/hle/service/am/am.h"
-#include "core/hle/service/aoc/aoc_u.h"
+#include "core/hle/service/aoc/addon_content_manager.h"
 #include "core/hle/service/apm/apm.h"
 #include "core/hle/service/audio/audio.h"
 #include "core/hle/service/bcat/bcat.h"
